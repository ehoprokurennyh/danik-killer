#!/home/x86monkey/py/testp/bin/python
import chess
import chess.engine
from chess.polyglot import ZobristHasher, POLYGLOT_RANDOM_ARRAY
import logging
from random import random
import math

logger = logging.getLogger('test')
logger.addHandler(logging.FileHandler('./test.log'))

hasher = ZobristHasher(POLYGLOT_RANDOM_ARRAY)

costs = [1.0, 1.0, 3.05, 3.17, 5.0, 9.0, 10.0]
first_rank_penalties = [0.0, 0.0, 0.2, 0.15, 0.01, 0.05, 0.21]
convergence_coeffs = [0.01, 0.01, 0.015, 0.07, 0.07, 0.05, 0.17]

class Model:
    def __init__(self, fen=None):
        self._board = chess.Board()
        if fen is not None:
            self._board.set_fen(fen)

        self.score = 0.0
        for piece in chess.scan_forward(self._board.occupied_co[chess.WHITE]):
            self.score += costs[self._board.piece_type_at(piece)]

        for piece in chess.scan_forward(self._board.occupied_co[chess.BLACK]):
            self.score -= costs[self._board.piece_type_at(piece)]

        if self._board.turn == chess.BLACK:
            self.score = -self.score

        self._prev = set()
        self._rehash()

    def _rehash(self):
        self.hash = hasher(self._board)

    def push(self, move):
        self._prev.add(self.hash)
        if self._board.is_capture(move):
            self.score += 1.0 if self._board.is_en_passant(move) else costs[self._board.piece_type_at(move.to_square)]
        if move.promotion is not None:
            self.score += costs[move.promotion] - 1
        self.score = -self.score
        self._board.push(move)
        self._rehash()
        return move

    def pop(self):
        move = self._board.pop()
        if self.hash in self._prev:
            self._prev.remove(self.hash)
        self._rehash()
        if self._board.is_capture(move):
            self.score += 1.0 if self._board.is_en_passant(move) else costs[self._board.piece_type_at(move.to_square)]
        if move.promotion is not None:
            self.score += costs[move.promotion] - 1
        self.score = -self.score

    def get_moves(self):
        return sorted(self._board.generate_legal_moves(), key=self._moves_sort_key)

    def get_captures(self):
        return sorted(self._board.generate_legal_captures(), key=self._moves_sort_key)

    def _moves_sort_key(self, move):
        self._board.push(move)
        try:
            if self._board.is_check():
                return -100.0 if self._board.is_checkmate() else -10.0
        finally:
            self._board.pop()
        if move.promotion is not None:
            return -move.promotion
        elif self._board.is_capture(move):
            if self._board.is_en_passant(move):
                return -1.0
            delta = costs[self._board.piece_type_at(move.to_square)] - costs[self._board.piece_type_at(move.from_square)]
            return min(-1.0, delta)
        elif self._board.is_castling(move):
            return -0.5 
        elif self._board.piece_type_at(move.from_square) == 6:
            return 1.0
        return 0.0

    def endgame_mate(self, strong_side):
        res = 0.6
        weak_side = chess.BLACK if strong_side == chess.WHITE else chess.WHITE
        weak_king = chess.msb(self._board.occupied_co[weak_side] & self._board.kings)
        weak_king_file, weak_king_rank = weak_king % 8, weak_king // 8
        res += 0.05 * abs(weak_king_file - 3.5)
        res += 0.05 * abs(weak_king_rank - 3.5)
        for piece in chess.scan_forward(self._board.occupied_co[strong_side]):
            k = convergence_coeffs[self._board.piece_type_at(piece)]
            res += k * (8 - abs(piece % 8 - weak_king_file))
            res += k * (8 - abs(piece // 8 - weak_king_rank))
        return res

    def evaluate(self):
        if self.hash in self._prev:
            return 0.0
        res = self.score
        color = 1 if self._board.turn else -1

        for pawns in (file & self._board.pawns & self._board.occupied_co[chess.WHITE] for file in chess.BB_FILES):
            count = len(list(chess.scan_forward(pawns)))
            if count > 1:
                res -= 0.043 * count ** 1.1 * color

        for pawns in (file & self._board.pawns & self._board.occupied_co[chess.BLACK] for file in chess.BB_FILES):
            count = len(list(chess.scan_forward(pawns)))
            if count > 1:
                res += 0.043 * count ** 1.1 * color

        if self._board.occupied_co[chess.WHITE] & ~self._board.kings == 0:
            return res - self.endgame_mate(chess.BLACK) * color
        elif self._board.occupied_co[chess.BLACK] & ~self._board.kings == 0:
            return res + self.endgame_mate(chess.WHITE) * color

        count = 0
        for _ in chess.scan_forward(self._board.rooks | self._board.queens):
            count += 1

        endgame = 1 if count < 4 else -1

        for piece in chess.scan_forward(self._board.occupied_co[chess.WHITE] & chess.BB_RANK_1):
            piece_type = self._board.piece_type_at(piece)
            delta = first_rank_penalties[piece_type] * color
            if piece_type == chess.KING:
                delta *= endgame
            res -= delta

        for piece in chess.scan_forward(self._board.occupied_co[chess.BLACK] & chess.BB_RANK_8):
            piece_type = self._board.piece_type_at(piece)
            delta = first_rank_penalties[piece_type] * color
            if piece_type == chess.KING:
                delta *= endgame
            res += delta

        for piece in chess.scan_forward(self._board.occupied_co[chess.WHITE] & self._board.pawns):
            res += 0.05 * color * (piece // 8)
            res -= 0.02 * color * abs(piece % 8 - 3.5)

        for piece in chess.scan_forward(self._board.occupied_co[chess.BLACK] & self._board.pawns):
            res -= 0.05 * color * (7.0 - piece // 8)
            res += 0.02 * color * abs(piece % 8 - 3.5)

        for piece in chess.scan_forward(self._board.occupied_co[chess.WHITE] & self._board.pawns & (chess.C3 | chess.D3 | chess.E3)):
            if self._board.occupied & (piece + 8):
                res -= 0.3 * color

        for piece in chess.scan_forward(self._board.occupied_co[chess.BLACK] & self._board.pawns & (chess.C6 | chess.D6 | chess.E6)):
            if self._board.occupied & (piece - 8):
                res += 0.3 * color

        return res

    def is_gameover(self):
        return self._board.is_game_over() or self.hash in self._prev

    def result(self):
        return -1000.0 if self._board.is_checkmate() else 0.0

def quiesce(model, alpha, beta):
    if model.is_gameover():
        result = model.result()
        if result == 0.0 and result >= beta:
            return result
        if result < alpha:
            return alpha
        return min(result, beta)

    score = model.evaluate()
    if score >= beta:
        return beta
    if alpha < score:
        alpha = score
    for move in model.get_captures():
        if not model._board.is_en_passant(move):
            my = costs[model._board.piece_type_at(move.from_square)]
            his = costs[model._board.piece_type_at(move.to_square)]
            if my > his and model._board.attackers(not model._board.turn, move.to_square):
                continue
        model.push(move)
        score = -quiesce(model, -beta, -alpha)
        model.pop()
        if score >= beta:
            return beta
        elif score > alpha:
            alpha = score
    return alpha

def alpha_beta(model, alpha=-10000, beta=10000, depth=4):
    best_move = None
    if depth <= 0:
        return quiesce(model, alpha, beta), best_move
    moves = list(model.get_moves())
    if not moves:
        return quiesce(model, alpha, beta), None
    best_move = moves[0]
    if model.is_gameover() and model.result() == 0.0:
        beta = 0.0
    for move in moves:
        model.push(move)
        score = -alpha_beta(model, -beta, -alpha, depth - 1)[0]
        if score < -5000.0:
            score += 1.0
        if score > 5000.0:
            score -= 1.0
        model.pop()
        if score > alpha:
            best_move = move
            alpha = score
            if score >= beta:
                if score == 0.0:
                    beta = score
                return beta, best_move
    return alpha, best_move

def calc_depth(m, time):
    if time < 10000:
        return 3
    x = math.sqrt(max(5000, (time - 44444)) * (1 + random() / 2)) * 200 / (len(list(chess.scan_forward(m._board.occupied & ~m._board.pawns))) + 5) ** 2
    res = round(math.log(x))
    if res > 5:
        return 5
    elif res < 4:
        return 4
    return res

def main():
    m = Model()
    while True:
        try:
            tokens = input().split()
            logger.error(tokens)
            cmd = tokens[0]
            args = tokens[1:]
            if cmd == 'uci':
                print('uciok')
            elif cmd == 'isready':
                print('readyok')
            elif cmd == 'ucinewgame':
                m = Model()
            elif cmd == 'setoption':
                pass
            elif cmd == 'position':
                moves = args[args.index('moves') + 1:] if 'moves' in args else []
                if args[0] == 'startpos':
                    m = Model()
                elif args[0] == 'fen':
                    m = Model(' '.join(args[1:args.index('moves')] if moves else args[1:]))
                for move in moves:
                    m.push(chess.Move.from_uci(move))
            elif cmd == 'go':
                if 'movetime' in args:
                    k = 'movetime'
                else:
                    k = 'wtime' if m._board.turn == chess.WHITE else 'btime'
                time = float(args[args.index(k) + 1]) if k in args else 0
                depth = calc_depth(m, time)
                score, move = alpha_beta(m, depth=depth)
                print('info score cp {} depth {}'.format(round(score * 100), depth))
                print('bestmove {}'.format(move))
        except Exception as e:
            logger.error('exception:{}'.format(str(e)))

if __name__ == '__main__':
    main()
